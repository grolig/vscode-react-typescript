{
	"React Mobx Component - Full": {
		"prefix": "tsrcfull",
		"body": [
			"import React, { Component } from 'react';",
			"import { inject, observer } from 'mobx-react';",
			"import { Stores } from './${5:Stores}';",
			"",
			"export interface ${1:IApp}Props {",
				"${2:}: ${3:}",
			"}",
			"",
			"export interface ${1:IApp}State {",
			"}",
			"",
			"@inject(allStores => ({",
			"  ${2:}: allStores[Stores.${4:}] as ${3:}",
			"}))",
			"@observer",
			"export default class ${1:} extends React.Component<${1:}Props, ${1:}State> {",
			"  constructor(props: ${1:}Props) {",
			"    super(props);",
			"",
			"    this.state = {",
			"    }",
			"  }",
			"",
			"  public render() {",
			"    return (",
			"      <div>",
			"        ${6:}",
			"      </div>",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "Create a stateful React Component with typescript with Props, State, and a constructor."
	},
	"React Mobx Stateless Functional Component": {
		"prefix": "tsrsfcm",
		"body": [
			"import * as React from 'react';",
			"import { inject, observer } from 'mobx-react';",
			"import { Stores } from './${5:Stores}';",
			"",
			"export interface ${1:IApp}Props {",
				"${2:}: ${3:}",
			"}",
			"",
			"@inject(allStores => ({",
			"  ${2:}: allStores[Stores.${4:}] as ${3:}",
			"}))",
			"@observer",
			"const $1: React.SFC<$1Props> = (props) => {",
			"  return $0;",
			"};",
			"",
			"export default $1;"
		],
		"description": "Create a React Stateless Functional Component."
	},
	"React Stateless Functional Component": {
		"prefix": "tsrsfc",
		"body": [
			"import * as React from 'react';",
			"",
			"interface ${1:IApp}Props {$2",
			"}",
			"",
			"const $1: React.SFC<$1Props> = (props) => {",
			"  return $0;",
			"};",
			"",
			"export default $1;"
		],
		"description": "Create a React Stateless Functional Component."
	},
	"constructor": {
		"prefix": "constr",
		"body": [
			"constructor(props) {",
			"  super(props);",
			"  ${1:}",
			"}"
		],
		"description": "Add a constructor in class."
	},
	"render": {
		"prefix": "ren",
		"body": [
			"public render() {",
			"  return (",
			"    ${1:}",
			"  );",
			"}"
		],
		"description": "When called, it should examine this.props and this.state and return a single React element."
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately after a component is mounted."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps: ${1:}, nextState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: ${1:}, prevState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwum",
		"body": [
			"componentWillUnmount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately before a component is unmounted and destroyed"
	},
	"componentSetState": {
		"prefix": "sst",
		"body": [
			"this.setState(${1:});"
		],
		"description": "Performs a shallow merge of nextState into current state"
	},
	"method": {
		"prefix": "met",
		"body": [
			"${1:methodName} = (${2:e}) => {",
			"  ${3:}",
			"}"
		],
		"description": "Create a method"
	},
	"Mobx Store": {
		"prefix": "tsmst",
		"body": [
			"import { observable, computed, action } from 'mobx'",
			"",
			"export class ${1:Name}Store {",
			"  @observable ${2:}: ${3:};",
			"}",
			""
		],
		"description": "Create Mobx Store"
	},
	"Mobx Observable": {
		"prefix": "tsmobs",
		"body": [
			"@observable ${1:}: ${2:};"
		],
		"description": "Create Mobx Observable"
	},
	"import": {
		"prefix": "imt",
		"body": [
			"import { $2 } from '$1';"
		],
		"description": "Create a import"
	}
}
